## Documentation syntax

### We use Fumadocs which is a framework on top of Next.js and MDX.

It supports markdown but also has some custom features and components.

### Headings

We use the following heading syntax:

```mdx
import { Heading } from 'fumadocs-ui/components/heading';

<MDX
  components={{
    h1: (props) => <Heading as="h1" {...props} />,
    h2: (props) => <Heading as="h2" {...props} />,
    h3: (props) => <Heading as="h3" {...props} />,
    h4: (props) => <Heading as="h4" {...props} />,
    h5: (props) => <Heading as="h5" {...props} />,
    h6: (props) => <Heading as="h6" {...props} />,
  }}
/>
```

### Steps

We use the following syntax for steps:

```mdx
import { Step, Steps } from 'fumadocs-ui/components/steps';

<Steps>
  <Step>
    ### Hello World
  </Step>

  <Step>
    ### Hello World
  </Step>
</Steps>
```

### Root toggle

We use the following syntax for root toggle:

```mdx
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import { RootToggle } from 'fumadocs-ui/components/layout/root-toggle';

<DocsLayout
  sidebar={{
    banner: (
      <RootToggle
        options={[
          {
            title: 'Folder 1',
            description: 'Pages in folder 1',
            url: '/path/to/page-tree-1',
          },
          {
            title: 'Folder 2',
            description: 'Pages in folder 2',
            url: '/path/to/page-tree-2',
          },
        ]}
      />
    ),
  }}
/>;
```

### Tabs

We use the following syntax for tabs:

```mdx
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

<Tabs items={['Javascript', 'Rust']}>
  <Tab value="Javascript">Javascript is weird</Tab>
  <Tab value="Rust">Rust is fast</Tab>
</Tabs>
```

Without value Without a value, it detects from the children index. Note that
it might cause errors on re-renders, it's not encouraged if the tabs might
change.

```mdx
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

<Tabs items={['Javascript', 'Rust']}>
  <Tab>Javascript is weird</Tab>
  <Tab>Rust is fast</Tab>
</Tabs>
```

### Type table

We use the following syntax for type table:

```mdx
import { TypeTable } from 'fumadocs-ui/components/type-table';

<TypeTable
  type={{
    percentage: {
      description:
        'The percentage of scroll position to display the roll button',
      type: 'number',
      default: 0.2,
    },
  }}
/>
```

### Banner

We use the following syntax for banner:

```mdx
import { Banner } from 'fumadocs-ui/components/banner';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}): React.ReactElement {
  return (
    <html lang="en">
      <body>
        <Banner>Hello World</Banner>
        {children}
      </body>
    </html>
  );
}
Variants
```

```mdx
import { Banner } from 'fumadocs-ui/components/banner';

<Banner variant="rainbow">Hello World</Banner>;
```

Close Allow to close the banner.

```mdx
import { Banner } from 'fumadocs-ui/components/banner';

<Banner id="hello-world">Hello World</Banner>;
```

### Accordion

We use the following syntax for accordion:

```mdx
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';

<Accordions>
  <Accordion title="My Title">My Content</Accordion>
</Accordions>
```

Linking to an accordion

```mdx
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';

<Accordions>
  <Accordion title="My Title">My Content</Accordion>
</Accordions>
```

### Cards

We use the following syntax for cards:

```mdx
<Accordions>
  <Accordion title="My Title" id="my-title">
    My Content
  </Accordion>
</Accordions>
```

The callout component is a custom component that is used to display a callout.

```mdx
import { Callout } from 'fumadocs-ui/components/callout';

<MDX
  components={{
    Callout,
  }}
/>;
```

The props are Prop Type Default type "info" | "warn" | "error" info icon

ReactNode -

The code block component is a custom component that is used to display a code
block.

```mdx
import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';

<MDX
  components={{
    // HTML `ref` attribute conflicts with `forwardRef`
    pre: ({ ref: _ref, ...props }) => (
      <CodeBlock {...props}>
        <Pre>{props.children}</Pre>
      </CodeBlock>
    ),
  }}
/>;
```

Keep the background color of the code block which is g enerated by Shiki

```mdx
import { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';
```

```mdx
<MDX
  components={{
    pre: ({ ref: _ref, ...props }) => (
      <CodeBlock keepBackground {...props}>
        <Pre>{props.children}</Pre>
      </CodeBlock>
    ),
  }}
/>;
```

### Icons

Specify a custom icon by passing an icon prop to CodeBlock component.

By default, the icon will be injected by the custom Shiki transformer.

### Root prooider

The context provider of Fumadocs UI.

The context provider of all the components, including next-themes and context
for search dialog. It should be located at the root layout.

```mdx
import { RootProvider } from 'fumadocs-ui/provider';

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}
```

### Search Dialog

Customize or disable the search dialog with search option.

```mdx
<RootProvider
  search={{
    enabled: false,
  }}
>
  {children}
</RootProvider>
```

### Theme provider

The theme provider is a custom component that is used to provide the theme to
the components.

```mdx
<RootProvider
  theme={{
    enabled: false,
  }}
>
  {children}
</RootProvider>
```
