## custom rolled authentication with jwt jose, sessions , orm.

We are building a scalable Next.js application with a custom-rolled architecture and a strong focus on modularity and separation of concerns. Below are the core principles of our architecture:

When creating markdown files for the documentation app please refer to the .cursorrules file in the documentation app. 
apps/documentation/.cursorrules

---

### **Folder Structure**
- `src/shared`:  
  Contains any shared logic, components, hooks, or utilities used across the application.  
  Examples:  
  - **UI Components:** Shared components like those from Shadcn (e.g., button, modal) are stored in `src/shared/components/ui/index.ts`.  
    - The `index.ts` exports all Shadcn components for clean imports, aliased as `ui`. For example:  
      ```typescript
      import { Button } from 'ui';
      ```
  - **Shared State:** Any shared state goes in `src/shared/state/`.  

- `src/components`:  
  Holds **singular-use components**, such as the header or footer. These are not shared across the app.  

- `src/app`:  
  Used exclusively for rendering views. Each page consists of a `page.tsx` and associated metadata.  
  - **Views:**  
    The page content is imported from `src/views/<page-name>/index.tsx`, where views are composed of UI blocks.  
    Views only handle rendering and importing components—no logic is present here.  

- `src/views`:  
  Contains the UI composition for specific pages. Each view is SSR-focused, importing reusable components and blocks from shared or module-specific code.

---

### **Feature Modules**
- **Modules Folder (`src/modules/`)**:  
  Contains all feature-specific code, organized by feature name. This structure ensures features are encapsulated and easily portable to other projects.  

  Each module contains:
  - **API:** Queries and mutations co-located under the `api` folder.  
    Example:  
    ```
    src/modules/<feature>/api/
    ├── queries/
    │   ├── index.ts
    │   ├── get-user.ts
    │   └── get-transactions.ts
    ├── mutations/
    │   ├── index.ts
    │   ├── create-user.ts
    │   └── update-profile.ts
    ```
    - Queries and mutations are server functions and should not use API routes unless absolutely necessary (e.g., for webhooks or OAuth).  

  - **Models:**  
    Zod schemas for validation, named with the `z.*.ts` convention (e.g., `z.user.ts`).  
    Example:  
    ```
    src/modules/<feature>/models/
    ├── z.user.ts
    └── z.transaction.ts
    ```

  - **State:**  
    Feature-specific state management with Zustand or context providers (when applicable).  
    Example:  
    ```
    src/modules/<feature>/state/
    └── use-feature-state.ts
    ```

  - **Hooks:**  
    Module-specific hooks organized in `src/modules/<feature>/hooks/`.  
    Example:  
    ```
    src/modules/<feature>/hooks/
    ├── use-currency.ts
    └── use-feature-hook.ts
    ```

  This structure applies to all features, such as `authentication`, `finance`, etc.

---

### **Shared Utilities and Data**
- **Shared Utilities (`src/shared/utils/`)**:  
  Contains utilities used across the application, such as formatting, debouncing, or custom hooks.

- **Database Layer (`src/server/db/`)**:  
  Contains all database interactions and schemas.  
  - Database access is abstracted under an alias `db` (e.g., `import { db } from 'db'`).  
  - Schemas, if applicable, are located in `src/server/db/schemas/index.ts`.  
  - Database code is abstracted for easy swapping of ORMs (e.g., Prisma, Drizzle ORM).

- **Server Functions**:  
  All server logic is implemented as **server functions**, which are co-located with their respective modules.

---

### **Naming Conventions**
1. **File Names:**  
   - Use **kebab-case** for all filenames.  
   - Single-function files: One file per function (e.g., `get-user.ts`).  
   - Each folder has an `index.ts` for exports.  

2. **Imports:**  
   - Use aliases for clarity and simplicity (e.g., `ui`, `db`).  

3. **Components:**  
   - Components are named in PascalCase.  

4. **Types:**  
   - Prefer **types** over interfaces where possible.  
   - Generic types (e.g., `PageProps`) are stored in `src/shared/types/`.

---

### **Key Design Principles**
1. **Separation of Concerns:**  
   All logic is isolated to ensure maintainability and scalability.

2. **Agnostic Design:**  
   - Everything we build should be agnostic to the underlying libraries and frameworks.  
   - For example, the database layer and authentication logic must be easily swappable.  
   - Avoid framework/library-specific naming (e.g., no `supabase.ts` or `prisma.ts`).

3. **Reusability:**  
   - Features are designed to be portable across projects with minimal changes.  
   - Shared components and hooks are emphasized for consistency.

4. **Custom Solutions:**  
   - Wherever possible, build custom implementations for core functionalities (e.g., caching, rate limiting).  

---

### **Tech Stack**
- Zustand (state management)  
- Framer Motion (animations)  
- Radix/Shadcn (UI components, though custom-built solutions are preferred)  
- TailwindCSS (styling)  
- Zod (validation)  
- Drizzle ORM / Drizzle-Kit (default ORM, but swappable)  
- Postgres (database, though interchangeable with equivalent solutions)  
- Jose (JWT handling)  
- Prism or another syntax highlighter (if needed)  
- Icon library of choice  

---

This approach ensures a robust, scalable, and modular architecture while making features reusable and agnostic to specific libraries or frameworks.


Besides that we try to built the most stuff our self, caching , rate limiting, authentication, etcetera. Couple of core packages we make use of which are for example:
- Zustand
- Framer motion
- Radix/shadcn but prefer custom
- Nuqs (if needed)
- Zod
For authentication which is libraryless as much as possible we only use:
- Jose (for JWT)
- Prism/another syntax highlighter where needed
- Icon library
- An ORM, typically Drizzle-orm and drizzle-kit.
- If needed a postgres , pg, , libsql or equivelant.
- TailwindCSS
