// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OAuthProvider {
  GITHUB
  GOOGLE
  EMAIL
}

// Example models - you can modify these according to your needs
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  username      String?   @unique
  password      String?   // Hashed password for email auth
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?   // Avatar URL
  
  // OAuth related fields
  oauthProvider OAuthProvider?
  oauthId       String?   // ID from OAuth provider
  oauthToken    String?   // Access token from OAuth provider
  oauthRefreshToken String? // Refresh token from OAuth provider
  
  // Account recovery and security
  resetToken         String?   @unique
  resetTokenExpires  DateTime?
  verificationToken  String?   @unique
  
  // Session management
  sessions    Session[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  accounts    Account[]
  profile     Profile?

  @@index([email])
  @@index([oauthId])
  @@map("users") // Table name in database
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String   // oauth, email, etc.
  provider          String   // github, google, etc.
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  bio         String?
  location    String?
  website     String?
  twitterUsername String?
  githubUsername  String?
  company     String?
  
  // Preferences and settings
  theme       String?   @default("light")
  language    String?   @default("en")
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
